#!/bin/env ruby

if ARGV.length < 1
  puts "Use this script to mirror block lists from another host every [interval=5] seconds."
  puts "#{$0} host [interval]"
  exit 1
end

host,interval=ARGV[0..1]
interval ||= 5

def get_blocked_ips
  parse_blocked_ips(`shorewall show dynamic`)
end

def get_ips_to_block(host)
  parse_blocked_ips(`ssh root@#{host} "shorewall show dynamic"`)
end

def parse_blocked_ips(output)
  output.split("\n").collect do |line|
     (ip=line.split[7]) =~ /^\d+\.\d+\.\d+\.\d+$/ ? ip : nil
  end.compact
end

def get_whitelisted_ips
  result = []
  return result unless File.exists?('/var/lib/denyhosts/allowed-hosts')
  File.read('/var/lib/denyhosts/allowed-hosts').split("\n").each do |line|
    result << line if line =~ /^\d+\.\d+\.\d+\.\d+$/
  end
end

def unblock_ip(ip)
  system "shorewall allow #{ip}"
end

while true do
  old_blocks = get_blocked_ips
  whitelisted_ips = get_whitelisted_ips
  printed = false
  to_be_removed = []
  get_ips_to_block(host).each do |ip|
    if !old_blocks.include?(ip) && !whitelisted_ips.include?(ip)
      system "shorewall drop #{ip}"
      old_blocks.delete(ip)
      printed = true
    else
      to_be_removed << ip unless old_blocks.include?(ip)
    end
  end
  (old_blocks|to_be_removed).each do |ip|
    unblock_ip(ip)
    printed = true
  end
  
  puts "--------------------" if printed
  sleep interval
end
